pipeline {
    agent {label 'src-builder'}

    environment {
        src="/usr/src"
        xsrc="/usr/xsrc"
        obj="/usr/obj"
        tools="/usr/tools"
        releases="${obj}/releasedir/amd64/binary"
        build_cmd="./build.sh -O ${obj} -T ${tools} -X ${xsrc} -x -j 6 "
    }

    stages {
        stage('Checkout latest src') {
            steps {
                dir(src) {
                    sh('hg pull && hg update')
                }
                dir(xsrc) {
                    sh('hg pull && hg update')
                }
            }
        }
        stage('Build and install tools') {
            steps {
                dir(src){
                    sh("${build_cmd} -r tools")
                }
            }
        }
        stage('Build GENERIC kernel') {
            steps {
                dir(src) {
                    sh("${build_cmd} kernel=GENERIC")
                }
            }
        }
        stage('Release GENERIC kernel') {
            steps {
                dir(src) {
                    sh("${build_cmd} releasekernel=GENERIC")
                }
            }
        }
        stage('Build distribution') {
            steps {
                dir(src) {
                    sh("${build_cmd} distribution")
                }
            }
        }
        stage('Create binary sets') {
            steps {
                dir(src) {
                    sh("${build_cmd} sets")
                }
            }
        }
        stage('Publish releases') {
            environment {
                version = sh(script: "sh ${src}/sys/conf/osrelease.sh", returnStdout: true).trim()
                machine = sh(script: "uname -m", returnStdout: true).trim()
                www     = "/var/www/netbsd/${version}/${machine}/binary"
            }
            steps {
                sh("mkdir -p ${www}/sets")
                sh("mkdir -p ${www}/kernel")
                sh("cp ${releases}/sets/* ${www}/sets")
                sh("cp ${releases}/kernel/* ${www}/kernel")
            }
        }
    }
}
