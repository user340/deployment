" Magic
if &compatible
    set nocompatible
endif

" Fix ESC Delay in CUI
if !has('gui_running')
    set timeout timeoutlen=1000 ttimeoutlen=50
endif

" Indent and Tab/Space Configuration
let extension = expand("%:e")
if extension == 'c' || extension == 'go'
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2
elseif extension == 'sh' || extension == 'html' || extension == 'css'
    set tabstop=2
    set softtabstop=2
    set shiftwidth=2
    set expandtab
else
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4
    set expandtab
endif

" Enable Backspace Key
set backspace=indent,eol,start

" Vim Layout
set shortmess+=I
set hidden
set number
set title
set showcmd
set cmdheight=2
set showmatch
set matchtime=1
set ambiwidth=double
set pumheight=5
set colorcolumn=80
set cursorline
hi clear CursorLine
set vb t_vb=
set formatoptions+=mMj

" Vim Command
set wildmenu
set wildmode=list:longest,full
set history=1000

" Status Line Layout
set laststatus=2
set statusline=
set statusline+=%5*%{&ff}%*
set statusline+=%4*\ %<%F%*
set statusline+=%2*\ %y
set statusline+=%3*\ %{''.(&fenc!=''?&fenc:&enc).''}
set statusline+=%2*%m%*
set statusline+=%8*\ %=\ row:%l/%L\ (%03p%%)
set statusline+=%1*%4v\ %*

" Tab and Indent Configure
set autoindent
set smartindent

" Search Configure
set wrapscan
set hlsearch
set wildmenu
set nostartofline
set ignorecase
set smartcase

" No Backup
set nobackup
set noswapfile

" Encoding Configure
set termencoding=utf-8
set encoding=utf-8
set fileformats=unix,mac,dos
set fileencoding=utf-8
set fileencodings=utf-8,shift-jis,euc-jp

set clipboard=nonameed,autoselect

""
" How to Install Vundle (https://github.com/VundleVim/Vundle.vim.git)
"     1. Clone Vundle.vim to $HOME/.vim/bundle
"         $ git clone https://github.com/VundleVim/Vundle.vim.git \
"         > $HOME/.vim/bundle/Vundle.vim
"     2. Run the following command on vim.
"         :PluginInstall
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Require
Plugin 'VundleVim/Vundle.vim'

" Color Scheme
Plugin 'morhetz/gruvbox'

" Copy and Paste
Plugin 'ConradIrwin/vim-bracketed-paste'

Plugin 'thinca/vim-quickrun'
let g:quickrun_config = {'*': {'hook/time/enable': '1','outputter/buffer/split': '15'},}
set splitbelow

" Syntax Check
"   - ShellScript (Bourne Shell, Bash)
"       * ShellCheck (https://www.shellcheck.net)
"   - Python3
"       * Flake8 (http://flake8.pycqa.org/en/latest/)
"   - HTML5
"       * textlint
Plugin 'vim-syntastic/syntastic'
let g:syntastic_python_checkers = ['flake8']

" Markdown
Plugin 'mzlogin/vim-markdown-toc'

" HTML
Plugin 'mattn/emmet-vim'
Plugin 'tpope/vim-surround'

Plugin 'prabirshrestha/asyncomplete.vim'
Plugin 'prabirshrestha/async.vim'
Plugin 'prabirshrestha/vim-lsp'
Plugin 'prabirshrestha/asyncomplete-lsp.vim'
Plugin 'prabirshrestha/asyncomplete-buffer.vim'
Plugin 'yami-beta/asyncomplete-omni.vim'
if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif
let g:lsp_diagnostics_enabled = 0

call vundle#end()
call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'whitelist': ['*'],
    \ 'blacklist': ['go'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ }))
call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
\ 'name': 'omni',
\ 'whitelist': ['*'],
\ 'blacklist': ['c', 'cpp', 'html'],
\ 'completor': function('asyncomplete#sources#omni#completor')
\  }))
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<cr>"
filetype plugin indent on
syntax on

" Color Scheme Configuration
set background=dark
colorscheme gruvbox
highlight Normal ctermbg=none
highlight NonText ctermbg=none
highlight LineNr ctermbg=none
highlight Folded ctermbg=none
highlight EndOfBuffer ctermbg=none 

""
" Custom Key Binding
"
" In Insert Mode
inoremap <c-e> <Esc>$a
inoremap <c-a> <Esc>^i
inoremap <c-h> <Left>
inoremap <c-j> <DOWN>
inoremap <c-k> <UP>
inoremap <c-l> <Right>

" In Normal Mode
nnoremap <C-c><C-c> :<C-u>nohlsearch<cr><Esc>
nnoremap + <C-a>
nnoremap - <C-x>
nnoremap k gk
nnoremap j gj
nnoremap <UP> gk
nnoremap <DOWN> gj
noremap!  
nnoremap Y y$
nnoremap <CR> o<Esc>
nnoremap <Space> i<Space><Esc>

""
" ctags Configuration
" *** How to Use ***
"     1. Install exctags.
"     2. Run the following command on src directory.
"         $ exctags --output=.tags -R .
set tags=./.tags;
set notagbsearch
nnoremap tj :exe("tjump ".expand('<cword>'))<CR>
nnoremap tb :pop<CR>
nnoremap tn :tag<CR>

augroup CloseTag
    autocmd!
    autocmd Filetype xml inoremap <buffer> </ </<C-x><C-o>
    autocmd Filetype html inoremap <buffer> </ </<C-x><C-o>
augroup END

function Quote()
    let pos = getpos(".")
    execute ":normal i"
        \ . "<figure><blockquote><p></p></blockquote>"
        \ . "<footer>&mdash; <cite></cite>, <cite></cite>"
        \ . "</footer></figure>"
    call setpos(".", pos)
endfunction
command Quote call Quote()

autocmd BufNewFile,BufRead ~/.mutt/tmp/neomutt-* set textwidth=64 colorcolumn=64
